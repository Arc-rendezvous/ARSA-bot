#!/usr/bin/env python
from flask import Flask, render_template, Response
 
# emulated camera
from camera_person_online import Camera_person_online

import time
import serial
# If you are using a webcam -> no need for changes
# if you are using the Raspberry Pi camera module (requires picamera package)
# from camera_pi import Camera
import freenect
import signal
import time
import sys
import cv2

app = Flask(__name__)

@app.route("/")
def index():
	timeNow = time.asctime( time.localtime(time.time()) )
	templateData = {
      'time': timeNow,
	}
	return render_template('index.html', **templateData)
@app.route('/camera')
def cam():
	"""Video streaming home page."""
	timeNow = time.asctime( time.localtime(time.time()) )
	templateData = {
      'time': timeNow
	}
	return render_template('camera.html', **templateData)
def gen(camera):
    """Video streaming generator function."""
    countif = 0
    while True:
        timer = cv2.getTickCount()
        frame = camera.get_frame(countif)
        countif = countif + 1
        
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')
        fps = cv2.getTickFrequency() / (cv2.getTickCount() - timer)
        print(fps)	
@app.route('/video_feed')
def video_feed():
    """Video streaming route. Put this in the src attribute of an img tag."""
    return Response(gen(Camera_person_online()),
                    mimetype='multipart/x-mixed-replace; boundary=frame')



if __name__ == '__main__':
    app.run(host='0.0.0.0', debug=True, threaded=True) #access at 192.168.43.203
